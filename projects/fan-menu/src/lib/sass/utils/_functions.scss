// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'img/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'assets/fonts/', $path);
}

/// Returns font size
/// @param {Integer} $level - font size level
/// @return {Size}
@function type-scale($level) {
  @return map-get(
                  map-get($type-settings, $level), 'font-size'
  );
}

/// Returns line height
/// @param {Integer} $level - line height level
/// @return {Size}
@function line-height($level) {
  @return map-get(
                  map-get($type-settings, $level), 'line-height'
  );
}

/// Returns z-index value
/// @param {String} $key - z-layer's name
/// @return {Integer}
@function z($key) {
  @if map-has-key($z-layers, $key) {
    @return map-get($z-layers, $key);
  }

  @warn "Unknown `#{$key}` in $z-layers.";
  @return null;
}
